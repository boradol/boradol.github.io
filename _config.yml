# Site
repository: https://github.com/boradol
# favicon: Directory of your favicon (eg. images/favicon.ico)(optional)

# Content configuration version
version: 2

# Personal info
name: BoraKim(김보라)
title: Backend Developer
email: boradol0902@gamil.com
# email_title: Email (Email title override)
#phone: Your phone number (optional)
# phone_title: Phone (Phone title override)
website: https://velog.io/@boradol
# website_title: Web (Website title override)

# Dark Mode (true/false/never)
darkmode: false

# Social links
github_username: boradol
#twitter_username: jekyllrb
#stackoverflow_username: "00000001"
#dribbble_username: jekyll
#facebook_username: jekyll
#flickr_username: jekyll
#instagram_username: jekyll
#linkedin_username: jekyll
#xing_username: jekyll
#pinterest_username: jekyll
#youtube_username: jekyll
#orcid_username: 0000-0000-0000-0000
#googlescholar_username: D847cGsAAAAJ

# Additional icon links
#additional_links:
#- title: Link name
#  icon: (https://ibb.co/mD6TVcF)
#  url: boradol.github.io
# - title: another link
#   icon: font awesome brand icon name (eg. fab fa-twitter) (https://fontawesome.com/icons?d=gallery&s=brands&m=free)
#   url: Link url (eg. https://google.com)

# Google Analytics and Tag Manager
# Using more than one of these may cause issues with reporting
# gtm: "GTM-0000000"
# gtag: "UA-00000000-0"
# google_analytics: "UA-00000000-0"

# About Section
# about_title: About Me (Use this to override about section title)
about_profile_image: images/boradol.jpg
about_content: | # this will include new lines to allow paragraphs
    __[Intro]__

    - 💯 I major in __Math-Education__.
    - 🧐 I'm interested in __OOP__!
    - 🧽 I'm like SpongeBob! Because It makes anyone feel __positive__ and __happy__.

    __[Motto]__

    Everything is valuable.(모든 것은 __가치__ 있다.)

content:
  - title: Experience
    layout: list
    content:
      - layout: top-left
        title: H&H(에이치엔에이치)
        sub_title: Backend Developer
        caption: 2.3 Years (eg. 23 August 2021 - 21 November 2023)
        link: 
        quote: >
          AI 운동 코칭 기반 앱 서비스
        description: | # this will include new lines to allow paragraphs
          - __[2023.04. ~ 2023.11.] 서버 고도화 작업 및 기능 개선__
            - 개발 내용 : 스쿼트 챌린지앱과 짐메이트 앱의 공통 기능과 각 앱의 기능들을 분리, 비용적인 절감을 위해 정비.
            - AWS 비용 절감을 위한 작업
              - Node-exporter, Prometheus를 적용하여 Grafana로 서버 모니터링 구축.
                - AlertManager를 Slack과 연동하여 서버 스펙 상 문제가 생길 때 알람이 울려 바로 문제 해결을 할 수 있게 함.
                - 꾸준히 여러대의 EC2인스턴스를 한번에 Grafana를 통해 모니터링 함으로써 과도하게 사용되는 서버
              - 고정적으로 사용하는 EC2인스턴스를 예약 인스턴스로 적용하여 매월 40%의 비용절감.
              - 기존 스쿼트 챌린지 파일 서버 S3로 이관
                - 원래 스쿼트 챌린지용 파일 서버를 EC2 한대를 이용하여 저장하였던 것을 S3로 마이그레이션 하면서 EC2 하나의 비용보다 
              - 고객 문의사항 모니터링
                - 회사에 CS전담 직원이 없어 고객 문의사항이 들어와도 인지하지 못하는 상황이 발생하여 
            - 프로젝트에 멀티모듈 적용
              

            - MSA 적용을 위한 밑작업.
            - 다국어 지원을 위한 
          - __[2022.09. ~ 2023.03.] 짐메이트 앱 개발__
            - 개발 내용 : 스쿼트 챌린지앱에서 스쿼트를 포함한 78가지 운동으로 확장한 홈트 전용 앱 개발.
            - SpringBoot 개발환경 변경 
              - Kotlin으로 개발
              - Spring Boot 3 으로 마이그레이션
              - AWS s3 적용.
                - 기존 minIO를 이용한 파일 인스턴스 대신에 파일관리와 비용적인 측면도 훨씬 효율적인 AWS S3 도입.
                - 디렉토리에 따라서 권한을 설정하여 사용자가 URL을 알아도 함부러 접근할 수 없게 막음.
                - AWS Backup을 사용하여 데이터를 정기적으로 백업하여 사용자 데이터 유실을 미연에 방지.   
                - CloudFront를 사용하여 해당 버킷에 대한 도메인을 설정하고 cdn으로 한국서비스 뿐만아니라 다른 나라의 서비스에서도 파일 접근의 속도가 저하되지 않도록 함.
              - Spring Cloud의 Vault 적용.
                - DB 계정정보나, AWS 계정정보 같은 보안적인 정보들이 properties 파일에 담겨 git에 올라가는 것을 방지하고자 적용.
                - Vault의 cidr을 회사 내부 관계자들의 ip로만 관리하여 Spring Application을 내부 관계자만 실행 할 수 있게 함.
              - Redis를 이용하여 수많은 운동 데이터 목록 및 홈 화면에 해당하는 API 캐싱하여 목록 제공.
                - 원래는 사용자가 API를 호출할 때마다 목록이 DB를 통해 불려와졌던 것을 Redis를 활용하여 0.01s 미만의 time out으로 줄임. 
          - __[2022.03. ~ 2022.08.] 스쿼트 챌린지 실제 서비스하기 위한 앱으로 개발__
            - 개발 내용 : 데모 앱 기반으로 일반 사용자가 사용할 수 있는 기능을 추가하여 앱 서비스 제공. 인프라 적으로 일반 사용자에게 좋은 성능을 제공하기 위해 정비 함.
            - 서버 분리 : DB, DEV, Stage, Production, Data 서버 분리 및 Docker 적용.
            - 파일 서버 : minIO
            - 주요 API 개발
              - 스쿼트 챌린지를 할 수 있는 챌린지 관련 API 구현.
                - 챌린지 팀전과 챌린지 개인전으로 챌린지 방을 개설할 수 있는 방 만들기 API 구현
                - 챌린지에 친구 초대 가능한 API 구현
                - 스쿼트 개수에 따라 멤버들의 스쿼트 랭킹 API구현
                - 개인 스쿼트 주간, 월간 기록 API 구현
                - 회원 전체 스쿼트 랭킹 API 구현.
                - 스쿼트 기록에 따라 배지 API 구현.
                - 앱 리텐션 높이기 위한 포인트 지급 API 구현. (출석체크, 스쿼트 일정 개수 도달, 친구초대, 이벤트)
                - 기본 기능 API 구현 : 회원 정보 수정, 공지사항, FAQ, 버전
                - FactoryMethod로 공통 Response 객체로 반환하여 클라이언트가 공통된 반환 객체를 받을 수 있게 구현.
                - ControllerAdvice로 서버에서 내려주는 공통 에러 처리 구현.
          - __[2021.08. ~ 2022.02.] 스쿼트챌린지 데모 앱 개발__
            - 개발내용 : 라이벌인 두 회사의 스쿼트 합산 대결을 주제로 앱 서비스 기본 틀 마련 및 포즈 인식의 가동성 범위 테스트
            - AWS 클라우드 초기 서버 세팅
              - EC2 인스턴스에 MariaDB와 Nginx를 설치하고, SpringBoot를 활용한 애플리케이션을 배포함.
              - 물리적인 환경에서 벗어나 안정적인 서버 환경을 구축 마련.
            - 소셜로그인 기능 개발
              - Spring Security와 Spring OAuth2를 활용하여 구글, 카카오, 네이버 소셜로그인을 구현.
              - 인증 서버에서 검증 해준 회원은 우리 서비스 자체에서 Token을 발급. 앱과 서버의 통신에서는 Token기반으로 하는 것이 서버가 세션정보를 가지는 부담을 덜어 서버의 효율성 증가함.
              - 전략 패턴을 사용하여 소셜 플랫폼에 맞는 로그인 전략 객체 생성하여 확장성과 유지보수성을 얻음. 나중에 다른 소셜 기능이 추가되더라도 OCP를 지킬수 있음.
            - 스쿼트 기록 관리 및 스쿼트 랭킹보드에 필요한 API 개발
              - RestAPI를 기반으로 클라이언트에게 View에 필요한 데이터를 전송.
              - 스쿼트 합산결과를 순수 비즈니스 로직 처리에서 쿼리로 성능 개선하여 랭킹 보드의 요청 속도 단축.
            - FCM API 개발
              - Android와 iOS푸시알람 전송을 할 수 있는 API개발.
              - Spring scheduler로 일정시간에 배치를 돌려 특정 기록에 대해 스쿼트를 더욱 증진할 수 있는 알람을 전송하여 운동을 독려하는 서비스 제공.
      - layout: top-left
        title: Infocube(인포큐브)
        sub_title: 연구소 / 사원
        caption: 1.2 Years (eg. 1 June 2020 - 27 July 2021)
        link: 
        quote: >
          5G 네트워크 허브 개발
        description: | # this will include new lines to allow paragraphs
          - 네트워크 허브의 ptp4l 프로토콜 설계
          - 네트워크 허브의 QA 테스트 모듈 개발 (C lang)

  - title: Projects
    layout: list # Type of content section (list/text)
    content:
      - layout: left
        border: weak  # Value of `weak` will display a weak border below this item. # Any 
                      # other value (or no value) means no border will be displayed
        title: 방탈출 커뮤니티
        # link: Link to project (eg. sproogen.github.io/modern-resume-theme)(optional)
        # link_text: Link Text
        # additional_links:
        #   - title:  Github page for project (eg. sproogen/modern-resume-theme)
        #     icon: fab fa-github
        #     url: Link to project (eg. sproogen.github.io/modern-resume-theme)(optional)
        #   - title:  Github page for project (eg. sproogen/modern-resume-theme)
        #     icon: fab fa-github
        #     url: Link to project (eg. sproogen.github.io/modern-resume-theme)(optional)
        # quote: >
        #   Short overview of the project (optional)
        # description: | # this will include new lines to allow paragraphs
        #   Description about the work on/with the project

  - title: Education
    layout: list
    content:
      - layout: top-left
        title: ATDD, 클린 코드 with Spring
        sub_title: Next-step
        caption: 1M (eg. 2023.01. - 2023.02.)
        quote: >
          ATDD(인수 테스트 주도 개발) 프로세스를 적용하여 TDD(테스트 주도 개발), 클린 코드 작성, 그리고 리팩터링에 대한 경험을 쌓음.
        description: | # this will include new lines to allow paragraphs
          - 인수 테스트의 개념과 스프링 환경에서 효과적인 작성 및 활용 방법
      - layout: top-left
        title: TDD, 클린 코드 with Java
        sub_title: Next-step
        caption: 2M (eg. 2022.9. - 2022.11.) 
        description: | # this will include new lines to allow paragraphs
          __유지보수하기 좋은코드, 개발에 TDD, OOP, 클린 코드를 적용__
            - 단위 테스트, TDD
            - 리팩토링 : 메소드 분리, 클래스 분리, 함수형 프로그래밍, 스트림, 람다, 점진적인 리팩터링과 OOP, 클린코드
            - 동료들에게 클린코드와 테스트코드에 대해 Study를 하며 회사 컨벤션에 적용해보며 
      - layout: top-left
        title: 데이터융합sw과
        sub_title: 분당융합기술교육원(비학위직업훈련과정)
        caption: 10M (eg. 2019.09.02 - 2020.06.)
        description: | # this will include new lines to allow paragraphs
          __IT비전공자로서 개발자로서의 취업 발판을 만들어준 교육__
            - Linux(Ubuntu, CentOS), C, Java, Python, SQL 등 IT 기초 지식에 대해 학습함.
            - AI과정에서 머신러닝, 딥러닝에 대해에 학습하고 Tensorflow를 활용한 MNIST문자 이미지 인식 프로그램을 구현함. 평가함수를 통해 모델이 오류가 적은 방향으로 학습이 되도록 파라미터 값을 최적화 함.
            - 리눅스에 직접 나만의 Oracle서버를 설치하여 대용량의 데이터로 쿼리를 직접 작성함. 회원정보의 각 지역별 구매목록을 조사하여 지역별 유의미한 데이터를 추출하는 과정을 경험함. 또 쿼리를 어떻게 작성하느냐에 따라서 성능의 차이가 확연하게 나는것을 경험함.
            - SpringBoot를 이용한 사원관리 HR게시판 형태를 제작하는 프로젝트를 진행함. 사원을 CRUD 하면서 Web프로그래밍의 기초를 알게 되었고, 직접 데이터를 활용하여 실무적인 프로세스의 프로그래밍을 경험함.
            - 매일 주어지는 과제를 PPT에 정리하고 발표하는 시간을 가지며 개발자가 Study하는 방법을 터득해 나감.
            - 과제를 수행 못할 시 과정에서 탈락이 되는 점도 있었고, 동기들이 대부분 다시 도전하기 위해 이 과정을 선택하여 교과과정 이외의 시간 저녁, 주말 함께 배운내용을 터득하기 위해 함께 학습하는 과정에서 개발자라면 기본적으로 문제 해결을 위해 끝까지 포기하지 않고 기술 습득하는 태도를 갖춤.

  - title: 🏅 Certificate
    layout: list
    content:
      - layout: top-left
        title: 정보처리기사
        sub_title: 한국산업인력공단
        caption: 2023.11.

  - title: 🛠️Skills
    layout: list
    content:
      - layout: left
        title: Backend
        description: |
          - Language : Java, Kotlin
          - Spring : Spring Boot, MVC, JPA(Hibernate), QueryDSL, Security, Spring Cloud AWS, Vault
          - Test : Junit5, Mockito, Kotest, Mockk
          - RestDocs, Swagger
      - layout: left
        title: DevOps
        description: | 
          - DB : MySQL, MariaDB
          - Linux : Ubuntu18.04, CentOS 7
          - AWS : EC2, ELB, RDS(mariaDB), S3, CloudFront, Backup
          - Monitoring : Node-exporter, Prometheus, Grafana
          - Nginx
          - Github Action
      - layout: left
        title: Collaboration
        description: | 
          - Agile Tool : Jira, Confluence
          - Slack
          - IntelliJ, VSCode
          - git, github
  
  - title: A Little More About Me
    layout: text
    content: | # this will include new lines to allow paragraphs
      ^____________________________________^

# Footer
footer_show_references: true
# references_title: References on request (Override references text)

# Build settings
# theme: modern-resume-theme (Use this is you are hosting your resume yourself)
# remote_theme: sproogen/modern-resume-theme (Use this if you are hosting your resume on GitHub)

sass:
  sass_dir: _sass
  style: compressed

plugins:
 - jekyll-seo-tag

exclude : [
  "Gemfile",
  "Gemfile.lock",
  "node_modules",
  "vendor/bundle/",
  "vendor/cache/",
  "vendor/gems/",
  "vendor/ruby/",
  "lib/",
  "scripts/",
  "docker-compose.yml",
  ]
